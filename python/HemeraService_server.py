##################################################
# file: HemeraService_server.py
#
# skeleton generated by "ZSI.generate.wsdl2dispatch.ServiceModuleWriter"
#      /usr/local/bin/wsdl2py HemeraService.wsdl
#
##################################################

from ZSI.schema import GED, GTD
from ZSI.TCcompound import ComplexType, Struct
from HemeraService_types import *
from ZSI.ServiceContainer import ServiceSOAPBinding

# Messages  
class check_syntaxRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        spec -- part spec
        """
        self._spec =  kw.get("spec")
check_syntaxRequest.typecode = Struct(pname=("http://localhost:8081/HemeraService","check_syntax"), ofwhat=[ZSI.TC.String(pname="spec", aname="_spec", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=check_syntaxRequest, encoded="http://localhost:8081/HemeraService")

class check_syntaxResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        return -- part return
        msg -- part msg
        """
        self._return =  kw.get("return")
        self._msg =  kw.get("msg")
check_syntaxResponse.typecode = Struct(pname=("http://localhost:8081/HemeraService","check_syntaxResponse"), ofwhat=[ZSI.TC.Boolean(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="msg", aname="_msg", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=check_syntaxResponse, encoded="http://localhost:8081/HemeraService")

class startRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        id -- part id
        spec -- part spec
        """
        self._id =  kw.get("id")
        self._spec =  kw.get("spec")
startRequest.typecode = Struct(pname=("http://localhost:8081/HemeraService","start"), ofwhat=[ZSI.TC.String(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="spec", aname="_spec", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=startRequest, encoded="http://localhost:8081/HemeraService")

class startResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        return -- part return
        msg -- part msg
        """
        self._return =  kw.get("return")
        self._msg =  kw.get("msg")
startResponse.typecode = Struct(pname=("http://localhost:8081/HemeraService","startResponse"), ofwhat=[ZSI.TC.Boolean(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="msg", aname="_msg", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=startResponse, encoded="http://localhost:8081/HemeraService")

class stepRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        id -- part id
        """
        self._id =  kw.get("id")
stepRequest.typecode = Struct(pname=("http://localhost:8081/HemeraService","step"), ofwhat=[ZSI.TC.String(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=stepRequest, encoded="http://localhost:8081/HemeraService")

class stepResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        return -- part return
        proofRepr -- part proofRepr
        msg -- part msg
        """
        self._return =  kw.get("return")
        self._proofRepr =  kw.get("proofRepr")
        self._msg =  kw.get("msg")
stepResponse.typecode = Struct(pname=("http://localhost:8081/HemeraService","stepResponse"), ofwhat=[ZSI.TC.Boolean(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="proofRepr", aname="_proofRepr", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="msg", aname="_msg", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=stepResponse, encoded="http://localhost:8081/HemeraService")

class runRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        id -- part id
        """
        self._id =  kw.get("id")
runRequest.typecode = Struct(pname=("http://localhost:8081/HemeraService","run"), ofwhat=[ZSI.TC.String(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=runRequest, encoded="http://localhost:8081/HemeraService")

class runResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        return -- part return
        proofRepr -- part proofRepr
        msg -- part msg
        """
        self._return =  kw.get("return")
        self._proofRepr =  kw.get("proofRepr")
        self._msg =  kw.get("msg")
runResponse.typecode = Struct(pname=("http://localhost:8081/HemeraService","runResponse"), ofwhat=[ZSI.TC.Boolean(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="proofRepr", aname="_proofRepr", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="msg", aname="_msg", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=runResponse, encoded="http://localhost:8081/HemeraService")

class proveRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        formula -- part formula
        """
        self._formula =  kw.get("formula")
proveRequest.typecode = Struct(pname=("http://localhost:8081/HemeraService","prove"), ofwhat=[ZSI.TC.String(pname="formula", aname="_formula", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=proveRequest, encoded="http://localhost:8081/HemeraService")

class proveResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        return -- part return
        """
        self._return =  kw.get("return")
proveResponse.typecode = Struct(pname=("http://localhost:8081/HemeraService","proveResponse"), ofwhat=[ZSI.TC.String(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=proveResponse, encoded="http://localhost:8081/HemeraService")


# Service Skeletons
class HemeraService(ServiceSOAPBinding):
    soapAction = {}
    root = {}

    def __init__(self, post='/HemeraService', **kw):
        ServiceSOAPBinding.__init__(self, post)

    def soap_check_syntax(self, ps, **kw):
        request = ps.Parse(check_syntaxRequest.typecode)
        return request,check_syntaxResponse()

    soapAction['http://localhost:8081/HemeraService/check_syntax'] = 'soap_check_syntax'
    root[(check_syntaxRequest.typecode.nspname,check_syntaxRequest.typecode.pname)] = 'soap_check_syntax'

    def soap_start(self, ps, **kw):
        request = ps.Parse(startRequest.typecode)
        return request,startResponse()

    soapAction['http://localhost:8081/HemeraService/start'] = 'soap_start'
    root[(startRequest.typecode.nspname,startRequest.typecode.pname)] = 'soap_start'

    def soap_step(self, ps, **kw):
        request = ps.Parse(stepRequest.typecode)
        return request,stepResponse()

    soapAction['http://localhost:8081/HemeraService/step'] = 'soap_step'
    root[(stepRequest.typecode.nspname,stepRequest.typecode.pname)] = 'soap_step'

    def soap_run(self, ps, **kw):
        request = ps.Parse(runRequest.typecode)
        return request,runResponse()

    soapAction['http://localhost:8081/HemeraService/run'] = 'soap_run'
    root[(runRequest.typecode.nspname,runRequest.typecode.pname)] = 'soap_run'

    def soap_prove(self, ps, **kw):
        request = ps.Parse(proveRequest.typecode)
        return request,proveResponse()

    soapAction['http://localhost:8081/HemeraService/prove'] = 'soap_prove'
    root[(proveRequest.typecode.nspname,proveRequest.typecode.pname)] = 'soap_prove'

