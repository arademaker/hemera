##################################################
# file: HemeraService_server.py
#
# skeleton generated by "ZSI.generate.wsdl2dispatch.ServiceModuleWriter"
#      /usr/local/bin/wsdl2py HemeraService.wsdl
#
##################################################

from ZSI.schema import GED, GTD
from ZSI.TCcompound import ComplexType, Struct
from HemeraService_types import *
from ZSI.ServiceContainer import ServiceSOAPBinding

# Messages  
class proveRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        formula -- part formula
        """
        self._formula =  kw.get("formula")
proveRequest.typecode = Struct(pname=("http://localhost:8081/HemeraService","prove"), ofwhat=[ZSI.TC.String(pname="formula", aname="_formula", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=proveRequest, encoded="http://localhost:8081/HemeraService")

class proveResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        return -- part return
        """
        self._return =  kw.get("return")
proveResponse.typecode = Struct(pname=("http://localhost:8081/HemeraService","proveResponse"), ofwhat=[ZSI.TC.String(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=proveResponse, encoded="http://localhost:8081/HemeraService")


# Service Skeletons
class HemeraService(ServiceSOAPBinding):
    soapAction = {}
    root = {}

    def __init__(self, post='/HemeraService', **kw):
        ServiceSOAPBinding.__init__(self, post)

    def soap_prove(self, ps, **kw):
        request = ps.Parse(proveRequest.typecode)
        return request,proveResponse()

    soapAction['http://localhost:8081/HemeraService/prove'] = 'soap_prove'
    root[(proveRequest.typecode.nspname,proveRequest.typecode.pname)] = 'soap_prove'

